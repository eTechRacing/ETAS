<?xml version="1.0"?>
<!DOCTYPE module [
    <!ENTITY szlig "&#223;">
    <!ENTITY copy "&#169;">
    <!ENTITY baseTypes-mlsl SYSTEM 'file://C:\Program%20Files%20(x86)\ETAS\INTECRIO5.0\SCOOP-IX\1.5/common/baseTypes-mlsl.six'>
    ]>
<?xml-stylesheet type="text/xsl" href="file://C:\Program%20Files%20(x86)\ETAS\INTECRIO5.0\SCOOP-IX\1.5/common/showSCOOP-IX.xsl"?>
<!--
<h1>SCOOP-IX</h1>
<p>
    <strong>Copyright &copy; 2014 ETAS GmbH</strong>, Borsigstra&szlig;e 14, D-70469 Stuttgart. <em>All rights reserved.</em>
</p>
-->
<module xmlns="http://www.etas.com/scoop-ix/1.5" xmlns:ix="http://www.etas.com/scoop-ix/1.5" xmlns:mlsl="http://www.etas.com/scoop-ix/1.5/modelDomain/matlab-simulink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.etas.com/scoop-ix/1.5
        file://C:\Program%20Files%20(x86)\ETAS\INTECRIO5.0\SCOOP-IX\1.5/schemas/scoop-ix-domain-mlsl.xsd" xmlns:html="http://www.w3.org/1999/xhtml">
	<directoryLocations scheme="MATLAB 23.2">
		<directory identifier="integratorDir" path="C:\Program Files (x86)\ETAS\INTECRIO5.0\MATLAB\"/>
		<directory identifier="toolDir" path=".\"/>
		<directory identifier="modelDir" path="C:\Users\joser\OneDrive\Documentos\GitHub\ETAS\Simulink\"/>
		<directory identifier="codeDir" path="C:\Users\joser\OneDrive\Documentos\GitHub\ETAS\Build\Synchronism_irt_rtw\"/>
	</directoryLocations>
	<moduleInfo identifier="Synchronism">
		<name>Synchronism</name>
		<modelLink href="mlsl:///&quot;{{modelDir}}Synchronism.slx&quot;"/>
		<version major="10" minor="0"/>
		<dateTime kind="created" year="2021" month="2" day="17" hour="14" minute="58" second="42"/>
		<dateTime kind="lastModified" year="2023" month="11" day="17" hour="17" minute="10" second="39"/>
		<completion degree="full"/>
		<suitability>
			<application domain="rapidPrototyping" addressesAvailable="true" nestedDataStructuresAvailable="true"/>
			<application domain="softwareDevelopment" addressesAvailable="false" nestedDataStructuresAvailable="true"/>
		</suitability>
		<user lastName="joser" role="modifier"/>
		<creators>
			<user lastName="cspt" role="creator"/>
			<tool kind="environment" vendor="The Mathworks, Inc." name="MATLAB">
				<version major="23" minor="2" year="2023" month="8" day="1" info="R2023b"/>
			</tool>
			<tool kind="modeler" vendor="The Mathworks, Inc." name="Simulink">
				<version major="23" minor="2" year="2023" month="8" day="1" info="R2023b"/>
			</tool>
			<tool kind="modeler" vendor="The Mathworks, Inc." name="Stateflow">
			</tool>
			<tool kind="codeGenerator" vendor="The Mathworks, Inc." name="Simulink Coder">
				<version major="23" minor="2" year="2023" month="8" day="1" info="R2023b"/>
				<mode name="target" value="INTECRIO Real-Time Target"/>
				<configuration>
					<option identifier="InlineParameters">1</option>
					<option identifier="InlineInvariantSignals">0</option>
					<option identifier="Solver">FixedStepDiscrete</option>
					<option identifier="SolverType">FixedStep</option>
					<option identifier="FixedStepOpts.FixedStep">0.2</option>
					<option identifier="FixedStepOpts.SolverMode">SingleTasking</option>
				</configuration>
			</tool>
			<tool kind="codeGenerator" vendor="The Mathworks, Inc." name="MATLAB Coder">
				<version major="23" minor="2" year="2023" month="8" day="1" info="R2023b"/>
			</tool>
			<tool kind="codeGenerator" vendor="ETAS GmbH" name="Connector for Simulink (IRT)" family="INTECRIO Tool Suite">
				<configuration>
					<option identifier="SCOOPIXFileName"><![CDATA[Synchronism.six]]></option>
					<option identifier="ExternalMode">0</option>
					<option identifier="IgnoreCustomStorageClasses">1</option>
					<option identifier="StopSimuAfterAssert">1</option>
					<option identifier="GenerateOnlySelectedSignalsToASAP2">0</option>
				</configuration>
			</tool>
		</creators>
	</moduleInfo>
	<codeInfo>
		<constitution mode="sourceCode"/>
		<dateTime kind="created" year="2024" month="4" day="10" hour="15" minute="29" second="25"/>
		<target>
			<board vendor="ETAS GmbH" model="INTECRIO Generic Experimental Target"/>
			<tool kind="compiler" vendor="GNU Project" family="GNU Compiler Collection" name="GNU C Compiler">
				<configuration>
					<optionKind name="macroDefine" prefix="-D"/>
					<optionKind name="includeDirectory" prefix="-I"/>
					<!-- RTW specific defines -->
					<option kind="macroDefine" name="USE_RTMODEL"/>
					<option kind="macroDefine" name="MODEL">Synchronism</option>
					<option kind="macroDefine" name="RT"/>
					<option kind="macroDefine" name="NUMST">1</option>
					<option kind="macroDefine" name="TID01EQ">0</option>
					<option kind="macroDefine" name="NCSTATES">0</option>
					<option kind="macroDefine" name="MT">0</option>
					<option kind="macroDefine" name="HAVESTDIO"/>
					<option kind="macroDefine" name="MdlStart">MdlStart_Synchronism</option>
					<option kind="macroDefine" name="MdlOutputs">MdlOutputs_Synchronism</option>
					<option kind="macroDefine" name="MdlUpdate">MdlUpdate_Synchronism</option>
					<option kind="macroDefine" name="MdlTerminate">MdlTerminate_Synchronism</option>
					<option kind="macroDefine" name="MdlInitializeSizes">MdlInitializeSizes_Synchronism</option>
					<option kind="macroDefine" name="MdlInitializeSampleTimes">MdlInitializeSampleTimes_Synchronism</option>
					<option kind="macroDefine" name="MdlInitialize">MdlInitialize_Synchronism</option>
					<option kind="macroDefine" name="MdlEnable">MdlEnable_Synchronism</option>
					<option kind="macroDefine" name="MdlDerivatives">MdlDerivatives_Synchronism</option>
					<option kind="macroDefine" name="MdlProjection">MdlProjection_Synchronism</option>
					<option kind="macroDefine" name="rt_ODECreateIntegrationData">rt_ODECreateIntegrationData_Synchronism</option>
					<option kind="macroDefine" name="rt_ODEUpdateContinuousStates">rt_ODEUpdateContinuousStates_Synchronism</option>
					<option kind="macroDefine" name="rt_ODEDestroyIntegrationData">rt_ODEDestroyIntegrationData_Synchronism</option>
					<option kind="macroDefine" name="rt_ODECacheDataIntoSolverInfo">rt_ODECacheDataIntoSolverInfo_Synchronism</option>
					<option kind="macroDefine" name="rt_ODERetrieveDataFromSolverInfo">rt_ODERetrieveDataFromSolverInfo_Synchronism</option>
					<option kind="macroDefine" name="rt_ODECreateSolverInfo">rt_ODECreateSolverInfo_Synchronism</option>
					<option kind="macroDefine" name="rt_SimInitTimingEngine">rt_SimInitTimingEngine_Synchronism</option>
					<option kind="macroDefine" name="rt_SimGetNextSampleHit">rt_SimGetNextSampleHit_Synchronism</option>
					<option kind="macroDefine" name="rt_SimUpdateDiscreteTaskSampleHits">rt_SimUpdateDiscreteTaskSampleHits_Synchronism</option>
					<option kind="macroDefine" name="rt_SimUpdateDiscreteEvents">rt_SimUpdateDiscreteEvents_Synchronism</option>
					<option kind="macroDefine" name="rt_SimUpdateDiscreteTaskTime">rt_SimUpdateDiscreteTaskTime_Synchronism</option>
					<option kind="macroDefine" name="rt_CallSys">rt_CallSys_Synchronism</option>
					<option kind="macroDefine" name="rt_EnableSys">rt_EnableSys_Synchronism</option>
					<option kind="macroDefine" name="rt_DisableSys">rt_DisableSys_Synchronism</option>
					<option kind="macroDefine" name="rt_SimDestroyTimingEngine">rt_SimDestroyTimingEngine_Synchronism</option>
					<option kind="macroDefine" name="rt_InitTimingEngine">rt_InitTimingEngine_Synchronism</option>
					<option kind="macroDefine" name="rt_DestroyTimingEngine">rt_DestroyTimingEngine_Synchronism</option>
					<option kind="macroDefine" name="rt_UpdateDiscreteTaskSampleHits">rt_UpdateDiscreteTaskSampleHits_Synchronism</option>
					<option kind="macroDefine" name="rt_GetNextSampleHit">rt_GetNextSampleHit_Synchronism</option>
					<option kind="macroDefine" name="rt_UpdateDiscreteEvents">rt_UpdateDiscreteEvents_Synchronism</option>
					<option kind="macroDefine" name="rt_UpdateDiscreteTaskTime">rt_UpdateDiscreteTaskTime_Synchronism</option>
					<!-- RTW specific include directories -->
					<option kind="includeDirectory"><![CDATA[{{codeDir}}]]></option>
					<option kind="includeDirectory"><![CDATA[{{integratorDir}}c\src\]]></option>
					<option kind="includeDirectory"><![CDATA[{{integratorDir}}c\lib\]]></option>
					<option kind="includeDirectory"><![CDATA[{{codeDir}}external\simulink\include\]]></option>
					<option kind="includeDirectory"><![CDATA[{{codeDir}}external\extern\include\]]></option>
					<option kind="includeDirectory"><![CDATA[{{codeDir}}external\rtw\c\src\]]></option>
					<option kind="includeDirectory"><![CDATA[{{codeDir}}external\rtw\c\libsrc\]]></option>
					<option kind="includeDirectory"><![CDATA[{{codeDir}}external\_sharedutils\]]></option>
				</configuration>
			</tool>
		</target>
	</codeInfo>
	<!-- Model specific files -->
	<fileContainer constitution="sourceCode">
		<pathBase path="{{codeDir}}"/>
		<!-- Model specific source files -->
		<file name="Synchronism_types.h" kind="header"/>
		<file name="Synchronism.h" kind="header"/>
		<!-- used through rtwShared.lib: rtwtypes.h -->
		<!-- used through rtwShared.lib: builtin_typeid_types.h -->
		<!-- used through rtwShared.lib: multiword_types.h -->
		<!-- used through rtwShared.lib: zero_crossing_types.h -->
		<file name="Synchronism.c" kind="body"/>
		<file name="Synchronism_private.h" kind="header"/>
		<file name="rtmodel.h" kind="header"/>
		<!-- used through rtwShared.lib: rtGetInf.h -->
		<!-- used through rtwShared.lib: rtGetInf.c -->
		<!-- used through rtwShared.lib: rtGetNaN.h -->
		<!-- used through rtwShared.lib: rtGetNaN.c -->
		<file name="Synchronism_main.c" kind="body"/>
		<file name="rt_sim.c" path="{{codeDir}}external\rtw\c\src\" kind="body"/>
		<!-- Target specific libraries -->
		<file name="rtwStaticLib.lib" kind="symbolicLibrary"/>
		<file name="rtwSharedLib.lib" kind="symbolicLibrary"/>
		<!-- Additional files -->
	</fileContainer>
	<fileContainer constitution="referencedModels">
	</fileContainer>
	<interface>
		<modelLinkBase href="mlsl:///{{modelDir}}Synchronism.slx?"/>
		<pathBase path="{{codeDir}}"/>
		<fileOrigin name="Synchronism.c"/>
		<fileOrigin name="rt_nonfinite.c"/>
		<fileOrigin name="rt_defines.c"/>
		<fileOrigin name="rtGetInf.c"/>
		<fileOrigin name="rtGetNaN.c"/>
		<fileOrigin name="Synchronism_main.c"/>
		<headerFile name="Synchronism.h"/>
		<headerFile name="Synchronism_private.h"/>
		<usage layoutFamily="mlsl:standardLayout"/>
		<!-- "import" MATLAB/Simulink base type and complex struct definitions via external entity -->
		&baseTypes-mlsl;
		<definitions>
			<structDef name="ExtY_Synchronism_T_tag">
				<fileOrigin name="Synchronism.h"/>
				<structMember identifier="Sync_CAN1">
					<type><typeRef name="real_T"/></type>
					<annotation>
						<documentation>&lt;Root&gt;/Sync_CAN1</documentation>
					</annotation>
				</structMember>
				<structMember identifier="Sync_CAN2">
					<type><typeRef name="real_T"/></type>
					<annotation>
						<documentation>&lt;Root&gt;/Sync_CAN2</documentation>
					</annotation>
				</structMember>
			</structDef>
			<typeDef name="ExtY_Synchronism_T">
				<struct/><typeRef name="ExtY_Synchronism_T_tag"/>
				<fileOrigin name="Synchronism.h"/>
			</typeDef>
			<structDef name="_DW_Synchronism_T">
				<fileOrigin name="Synchronism.h"/>
				<structMember identifier="counter">
					<type><typeRef name="real_T"/></type>
					<annotation>
						<documentation>State information for 'dsmMem'.</documentation>
					</annotation>
				</structMember>
			</structDef>
			<typeDef name="DW_Synchronism_T">
				<struct/><typeRef name="_DW_Synchronism_T"/>
				<fileOrigin name="Synchronism.h"/>
			</typeDef>
			<baseDef identifier="Synchronism_Y">
				<type><typeRef name="ExtY_Synchronism_T"/></type>
				<fileOrigin name="Synchronism.c"/>
				<annotation>
					<documentation>The rtY data structure for external outputs.</documentation>
				</annotation>
			</baseDef>
			<baseDef identifier="Synchronism_DW">
				<type><typeRef name="DW_Synchronism_T"/></type>
				<fileOrigin name="Synchronism.c"/>
				<annotation>
					<documentation>The dWork data structure for model state.</documentation>
				</annotation>
			</baseDef>
			<conversion name="Synchronism_CM_double">
				<rationalFunction>
					<numerator bx="1.0"/>
					<denominator f="1.0"/>
				</rationalFunction>
				<annotation>
					<documentation>Q = V</documentation>
				</annotation>
			</conversion>
		</definitions>
		<!-- rtP parameters following -->
		<!-- Constant parameters following -->
		<!-- Exported global parameters following -->
		<!-- Imported extern parameters following -->
		<!-- Global BlockIO (rtB) signals following -->
		<!-- Global constant BlockIO (rtC) signals following -->
		<!-- Exported global and imported extern signals following -->
		<!-- Global IRT DWork port signals following -->
		<dataElement interfaceKind="export">
			<dataCInterface identifier="Synchronism_DW.counter">
				<definitionLocation>
					<baseRef identifier="Synchronism_DW"/>
					<memberRef identifier="counter"/>
				</definitionLocation>
				<fileOrigin name="Synchronism.c"/>
			</dataCInterface>
			<modelOrigin identifier="Synchronism.Opaque.counter">
				<name>counter</name>
				<modelLink href="Synchronism/Opaque"/>
				<modelLocation>
					<pathNode name="Synchronism" kind="mlsl:model"/>
					<pathNode name="Counter" kind="mlsl:subsystem" type="atomic"/>
					<pathNode name="Data Store Memory" kind="mlsl:block"/>
					<pathNode name="counter" kind="mlsl:signal"/>
				</modelLocation>
				<modelKind kind="variable" visibility="private">
				</modelKind>
				<modelType type="continuous">
					<valueRange min="-1.7E+308" max="1.7E+308"/>
				</modelType>
				<annotation>
				</annotation>
			</modelOrigin>
			<implementation>
				<conversionRef name="Synchronism_CM_double"/>
			</implementation>
			<usage measurement="true">
				<address kind="pseudo">
					<BLOB kind="KP_BLOB" device="E_TARGET"/>
				</address>
			</usage>
		</dataElement>
		<!-- rtU input ports following -->
		<!-- rtY output ports following -->
		<dataElement interfaceKind="export">
			<dataCInterface identifier="Synchronism_Y.Sync_CAN1">
				<definitionLocation>
					<baseRef identifier="Synchronism_Y"/>
					<memberRef identifier="Sync_CAN1"/>
				</definitionLocation>
				<fileOrigin name="Synchronism.c"/>
			</dataCInterface>
			<modelOrigin identifier="Synchronism.Sync_CAN1">
				<name>Sync_CAN1</name>
				<modelLink href="Synchronism/Sync_CAN1"/>
				<modelLocation>
					<pathNode name="Synchronism" kind="mlsl:model"/>
					<pathNode name="Sync_CAN1" kind="mlsl:block" type="Outport"/>
				</modelLocation>
				<modelKind kind="variable" visibility="public">
					<flowDirection out="true"/>
				</modelKind>
				<modelType type="continuous">
					<valueRange min="-1.7E+308" max="1.7E+308"/>
				</modelType>
			</modelOrigin>
			<implementation>
				<conversionRef name="Synchronism_CM_double"/>
			</implementation>
			<usage measurement="true">
				<address kind="pseudo">
					<BLOB kind="KP_BLOB" device="E_TARGET"/>
				</address>
			</usage>
		</dataElement>
		<dataElement interfaceKind="export">
			<dataCInterface identifier="Synchronism_Y.Sync_CAN2">
				<definitionLocation>
					<baseRef identifier="Synchronism_Y"/>
					<memberRef identifier="Sync_CAN2"/>
				</definitionLocation>
				<fileOrigin name="Synchronism.c"/>
			</dataCInterface>
			<modelOrigin identifier="Synchronism.Sync_CAN2">
				<name>Sync_CAN2</name>
				<modelLink href="Synchronism/Sync_CAN2"/>
				<modelLocation>
					<pathNode name="Synchronism" kind="mlsl:model"/>
					<pathNode name="Sync_CAN2" kind="mlsl:block" type="Outport"/>
				</modelLocation>
				<modelKind kind="variable" visibility="public">
					<flowDirection out="true"/>
				</modelKind>
				<modelType type="continuous">
					<valueRange min="-1.7E+308" max="1.7E+308"/>
				</modelType>
			</modelOrigin>
			<implementation>
				<conversionRef name="Synchronism_CM_double"/>
			</implementation>
			<usage measurement="true">
				<address kind="pseudo">
					<BLOB kind="KP_BLOB" device="E_TARGET"/>
				</address>
			</usage>
		</dataElement>
		<functionElement interfaceKind="export">
			<functionCInterface identifier="irt_Start_Synchronism">
				<signature>
					<return>
						<type><void/></type>
					</return>
					<void/>
				</signature>
				<fileOrigin name="Synchronism_main.c"/>
			</functionCInterface>
			<modelOrigin identifier="irt_Start_Synchronism">
				<name>irt_Start_Synchronism</name>
				<modelLocation>
					<pathNode name="Synchronism" kind="mlsl:model"/>
					<pathNode name="irt_Start_Synchronism" kind="mlsl:process" type="initialization"/>
				</modelLocation>
				<modelKind kind="process"/>
				<runTimeInfo>
					<constraint>
						<execution trigger="initialization"/>
					</constraint>
				</runTimeInfo>
				<annotation>
					<documentation>
                        This is the initialization process of the Real-Time Target code.
                    </documentation>
				</annotation>
			</modelOrigin>
		</functionElement>
		<functionElement interfaceKind="export">
			<functionCInterface identifier="irt_OneStep_Synchronism">
				<signature>
					<return>
						<type><void/></type>
					</return>
					<void/>
				</signature>
				<fileOrigin name="Synchronism_main.c"/>
			</functionCInterface>
			<modelOrigin identifier="irt_OneStep_Synchronism">
				<name>irt_OneStep_Synchronism</name>
				<modelLocation>
					<pathNode name="Synchronism" kind="mlsl:model"/>
					<pathNode name="irt_OneStep_Synchronism" kind="mlsl:process" type="execution">
						<pathParameter name="mlsl:baseSampleRate" value="0.2"/>
						<pathParameter name="mlsl:sampleRates" value="0.2"/>
					</pathNode>
				</modelLocation>
				<modelKind kind="process"/>
				<runTimeInfo>
					<messageAccess>
						<message identifier="Synchronism_Y.Sync_CAN1" send="true"></message>
						<message identifier="Synchronism_Y.Sync_CAN2" send="true"></message>
					</messageAccess>
					<constraint>
						<period value="0.2"/>
						<offset value="0.0"/>
						<execution trigger="timer" priority="normal"/>
					</constraint>
				</runTimeInfo>
				<annotation>
					<documentation>
                        This is the execution process of the Real-Time Target code.
                    </documentation>
				</annotation>
			</modelOrigin>
		</functionElement>
		<functionElement interfaceKind="export">
			<functionCInterface identifier="irt_Terminate_Synchronism">
				<signature>
					<return>
						<type><void/></type>
					</return>
					<void/>
				</signature>
				<fileOrigin name="Synchronism_main.c"/>
			</functionCInterface>
			<modelOrigin identifier="irt_Terminate_Synchronism">
				<name>irt_Terminate_Synchronism</name>
				<modelLocation>
					<pathNode name="Synchronism" kind="mlsl:model"/>
					<pathNode name="irt_Terminate_Synchronism" kind="mlsl:process" type="termination"/>
				</modelLocation>
				<modelKind kind="process"/>
				<runTimeInfo>
					<constraint>
						<execution trigger="termination"/>
					</constraint>
				</runTimeInfo>
				<annotation>
					<documentation>
                        This is the termination process of the INTECRIO Real-Time Target code.
                    </documentation>
				</annotation>
			</modelOrigin>
		</functionElement>
	</interface>
</module>
